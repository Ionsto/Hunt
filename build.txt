Entity.cpp:4:1: error: prototype for ‘Entity::Entity(World*)’ does not match any in class ‘Entity’
 Entity::Entity(World * world)
 ^
In file included from Entity.cpp:1:0:
Entity.h:5:7: error: candidates are: constexpr Entity::Entity(const Entity&)
 class Entity{
       ^
Entity.h:11:5: error:                 Entity::Entity()
     Entity();
     ^
Entity.cpp:21:6: error: prototype for ‘void Entity::Update(Entity&)’ does not match any in class ‘Entity’
 void Entity::Update(Entity & other){
      ^
In file included from Entity.cpp:1:0:
Entity.h:14:10: error: candidate is: void Entity::Update(World*)
     void Update(World * world);
          ^
main.cpp: In function ‘int main(int, char**)’:
main.cpp:20:9: error: ‘Generation’ was not declared in this scope
         Generation = CreateGeneration(BestEnt)
         ^
main.cpp:22:27: error: unable to deduce ‘auto&&’ from ‘Generation’
         for(auto entity : Generation)
                           ^
NeuralNet.cpp:35:6: error: ‘NerualLayer’ has not been declared
 void NerualLayer::Randomise(float random)
      ^
NeuralNet.cpp: In function ‘void Randomise(float)’:
NeuralNet.cpp:37:23: error: ‘Neurons’ was not declared in this scope
     for(auto neuron : Neurons)
                       ^
NeuralNet.cpp: At global scope:
NeuralNet.cpp:55:6: error: ‘NerualNet’ has not been declared
 void NerualNet::Randomise(float random)
      ^
NeuralNet.cpp: In function ‘void Randomise(float)’:
NeuralNet.cpp:55:6: error: redefinition of ‘void Randomise(float)’
NeuralNet.cpp:35:6: note: ‘void Randomise(float)’ previously defined here
 void NerualLayer::Randomise(float random)
      ^
NeuralNet.cpp:57:23: error: ‘Neurons’ was not declared in this scope
     for(auto neuron : Neurons)
                       ^
World.cpp: In constructor ‘World::World()’:
World.cpp:4:12: error: ‘make_unique’ is not a member of ‘std’
     Prey = std::make_unique<EntityHunter>();
            ^
World.cpp:4:29: error: ‘EntityHunter’ was not declared in this scope
     Prey = std::make_unique<EntityHunter>();
                             ^
World.cpp:4:43: error: expected primary-expression before ‘)’ token
     Prey = std::make_unique<EntityHunter>();
                                           ^
World.cpp:5:12: error: ‘make_unique’ is not a member of ‘std’
     Pred = std::make_unique<EntityHunter>();
            ^
World.cpp:5:43: error: expected primary-expression before ‘)’ token
     Pred = std::make_unique<EntityHunter>();
                                           ^
World.cpp: In member function ‘bool World::CheckPredWin()’:
World.cpp:20:30: error: ‘class std::unique_ptr<Entity>’ has no member named ‘Pos’
     Vector Difference = Pred.Pos - Prey.Pos;
                              ^
World.cpp:20:41: error: ‘class std::unique_ptr<Entity>’ has no member named ‘Pos’
     Vector Difference = Pred.Pos - Prey.Pos;
                                         ^
World.cpp: In member function ‘void World::Update()’:
World.cpp:29:28: error: no matching function for call to ‘Entity::Update(std::unique_ptr<Entity>::pointer)’
     Prey->Update(Pred.get());
                            ^
In file included from World.h:2:0,
                 from World.cpp:1:
Entity.h:14:10: note: candidate: void Entity::Update(World*)
     void Update(World * world);
          ^
Entity.h:14:10: note:   no known conversion for argument 1 from ‘std::unique_ptr<Entity>::pointer {aka Entity*}’ to ‘World*’
World.cpp:30:28: error: no matching function for call to ‘Entity::Update(std::unique_ptr<Entity>::pointer)’
     Pred->Update(Prey.get());
                            ^
In file included from World.h:2:0,
                 from World.cpp:1:
Entity.h:14:10: note: candidate: void Entity::Update(World*)
     void Update(World * world);
          ^
Entity.h:14:10: note:   no known conversion for argument 1 from ‘std::unique_ptr<Entity>::pointer {aka Entity*}’ to ‘World*’
